// Code generated by go-bindata.
// sources:
// resources/app/index.html
// resources/app/static/css/base.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAppIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcf\x6e\x1a\x31\x10\xc6\xef\x3c\xc5\xc4\x17\x16\xa9\xac\xaf\x15\xf5\x22\xb5\x29\x95\x2a\x55\x6a\x0f\xa9\xa2\x1e\x07\x7b\x60\x2d\xbc\x36\xf2\x0c\x49\x50\xc4\xbb\x57\x5e\xfe\x64\x03\xf1\x85\xf1\xcc\xef\x1b\x7f\x1e\xb3\xe6\xee\xfb\xef\xfb\x87\x7f\x7f\x16\xd0\x4a\x17\xe6\x23\x53\x7e\x20\x60\x5c\x37\x8a\xa2\x2a\x09\x42\x37\x1f\x01\x00\x98\x8e\x04\xc1\xb6\x98\x99\xa4\x51\x7f\x1f\x7e\x4c\x3f\xab\x53\x29\xf8\xb8\x81\x4c\xa1\x51\x2c\xfb\x40\xdc\x12\x89\x82\x36\xd3\xaa\x64\x50\xbc\xd5\x96\x59\x2f\x91\xa9\xb6\xcc\x4a\xcf\x47\x46\x1f\x5b\x9b\x65\x72\xfb\x53\x1b\xe7\x9f\xc0\x06\x64\x6e\xd4\x73\xc6\xed\x96\xf2\xe9\x80\xeb\xaa\x4d\x51\x28\xca\xa0\x7a\x26\xe6\x8f\x14\x6c\xea\x08\x24\xc1\x57\x16\x1f\xc8\x4a\x4e\x71\xcc\xb0\x4c\x49\x58\x32\x6e\xef\x8c\x2e\xe0\x8d\x14\xbc\x6b\x94\x0d\xde\x6e\x14\xf4\xd7\x68\x94\xd0\x8b\x4c\x1d\xd9\x94\x51\x7c\x8a\x33\xd8\x45\x47\x39\xf8\x48\x6a\x7e\x5f\x48\x68\x29\xf7\x67\xad\x49\x00\xa1\xa5\x10\xd2\x55\xfb\xc1\xf6\x14\x1a\xb6\xd9\x6f\xe5\x98\xd3\x1a\x1e\xd1\x0b\xac\x52\x06\x7c\x33\x5c\x7a\x2e\x09\x32\xa1\xdb\xf7\x9c\x4b\x76\xd7\x51\x94\x1a\x9d\x5b\x3c\x51\x94\x5f\x9e\x85\x22\xe5\x6a\x3c\x90\x4d\x7b\xc1\xf8\x13\xac\x76\xd1\x16\xcb\xd5\x04\x5e\x2f\x56\x06\x60\x1d\x7a\x79\x75\xe1\x3a\x62\xc6\x35\x0d\xf1\xb2\xf8\xd9\x8b\x6d\xe1\x5c\xae\x23\x76\x37\x4c\x59\x16\x99\x40\x31\xee\xeb\x7e\x06\x6a\x76\x43\xf4\x06\x02\x65\xa9\xd4\x11\x99\x7c\xf9\x90\x59\x66\xc2\xcd\xfb\xd2\xe1\xb2\x3b\x0c\x44\x97\x89\xac\x49\x16\x81\x4a\xf8\x6d\xff\xd3\x55\xa7\x37\x9c\xd4\x29\xf6\x11\x34\x1f\x4f\xe3\x7a\x22\x4c\xd1\x55\xaf\xe5\x82\x33\x50\xf4\x82\xdd\x36\x90\x3a\x4c\x46\xef\x5d\x14\x07\x46\x9f\x5f\xd0\xe8\xe3\xdf\xd7\xe8\xfe\x03\xfa\x1f\x00\x00\xff\xff\xd0\xba\x76\x94\x50\x03\x00\x00")

func resourcesAppIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppIndexHtml,
		"resources/app/index.html",
	)
}

func resourcesAppIndexHtml() (*asset, error) {
	bytes, err := resourcesAppIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/index.html", size: 848, mode: os.FileMode(436), modTime: time.Unix(1495885765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAppStaticCssBaseCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9f\x82\x40\xd1\xad\x2e\x5c\x78\x53\x4f\x43\x8b\xb4\x44\x94\x96\x04\x95\xad\x6b\x14\xbe\x7b\x90\x28\xce\x92\x64\xfc\xef\x93\xff\x45\x5b\xf4\x0d\xa6\x4c\x1b\xfc\x77\x00\x00\x13\xfa\xaf\x50\xf3\x4f\xa2\xde\x67\xcd\xd5\xc1\xcb\x38\x8e\x9f\x97\xee\x00\xf3\x3c\x37\x10\x59\x42\x34\x07\x1f\xc3\xf0\xda\xc8\x82\x35\x48\x72\x30\xb4\x58\x90\x48\x52\xb8\xe5\x55\xc8\xe2\x71\xbf\x77\xdd\xfb\x5a\xb1\x14\xae\x57\x39\xc9\x77\x51\xdc\x1c\x18\x4e\xca\xcf\x1c\x77\x23\x3e\x27\xe3\x64\x0f\x47\x7a\xcf\xaa\xed\xcf\xf8\xcf\x7a\x54\x09\xc9\x81\xe7\x64\x5c\x1b\xff\xe5\x6a\xe2\x51\x8f\x6e\x11\xa2\xb3\x7d\x3f\x05\x00\x00\xff\xff\x50\x5c\x96\x33\x1d\x01\x00\x00")

func resourcesAppStaticCssBaseCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppStaticCssBaseCss,
		"resources/app/static/css/base.css",
	)
}

func resourcesAppStaticCssBaseCss() (*asset, error) {
	bytes, err := resourcesAppStaticCssBaseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/static/css/base.css", size: 285, mode: os.FileMode(436), modTime: time.Unix(1494851874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app/index.html":          resourcesAppIndexHtml,
	"resources/app/static/css/base.css": resourcesAppStaticCssBaseCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAppIndexHtml, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"base.css": &bintree{resourcesAppStaticCssBaseCss, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
